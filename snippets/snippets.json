{   
	"include": {
		"prefix": "include",
		"body": "include \"${1:}.porth\"",
		"description": "Include porth files",
		"scope": "source.porth"
	},
    "include std": {
        "prefix": ["include", "std"],
        "body": "include \"std.porth\"\n",
        "description": "Include the porth standard library",
        "scope": "source.porth"
    },
    "macro": {
        "prefix": "macro",
        "body": "macro ${1:_name_}\n\t${2:_body_}\nend",
        "description": "Macro definition: Code block that gets expanded at the place its called",
        "scope": "source.porth"
    },
    "proc": {
        "prefix": "proc",
        "body": "proc ${1:_name_}\n\t${2:_body_}\nend",
        "description": "Procedure definition: Code block that gets executed when called",
        "scope": "source.porth"
    },
    "inline": {
        "prefix": "inline",
        "body": "inline proc ${1:_name_}\n\t${2:_body_}\nend",
        "description": "Inline procedure definition: Code block that gets jumped to when called",
        "scope": "source.porth"
    },
    "memory": {
        "prefix": "memory",
        "body": "memory ${1:_name_} ${2:_bytes_} end",
        "description": "Allocates n bytes in static memory and returns the pointer",
        "scope": "source.porth"
    },
    "if block": {
        "prefix": "if",
        "body": [
            "if",
            "\t${1:_body_}",
            "end"
        ],
        "description": "Branch if-block if (stack[0] == 0)",
        "scope": "source.porth"
    },
    "if": {
        "prefix": "if",
        "body": "if",
        "description": "Instrinsic: if",
        "scope": "source.porth"
    },
    "if* block": {
        "prefix": "if*",
        "body": "if*\n\t${2:_body_}",
        "description": "Branch else if block after if block (stack[0] == 0)",
        "scope": "source.porth"
    },
    "if*": {
        "prefix": "if*",
        "body": "if*",
        "description": "Instrinsic: if*",
        "scope": "source.porth"
    },
    "else block": {
        "prefix": "else",
        "body": "else\n\t${1:_body_}",
        "description": "Else block after if block",
        "scope": "source.porth"
    },
    "else": {
        "prefix": "else",
        "body": "else",
        "description": "Instrinsic: else",
        "scope": "source.porth"
    },
    "if else block": {
        "prefix": "if",
        "body": [
            "${1:_condition_} if",
            "\t${2:_body_}",
            "else",
            "\t${3:_body_}",
            "end"
        ],
        "description": "Branch if-else-block if (stack[0] == 0)",
        "scope": "source.porth"
    },
    "if else if* block": {
        "prefix": "if",
        "body": [
            "${1:_condition_} if",
            "\t${2:_body_}",
            "else ${3:_condition_} if*",
            "\t${4:_body_}",
            "else",
            "\t${5:_body_}",
            "end"
        ],
        "description": "Branch if-elseif-else-block if (stack[0] == 0)",
        "scope": "source.porth"
    },
    "while": {
        "prefix": "while",
        "body": "while",
        "description": "Instrinsic: while",
        "scope": "source.porth"
    },
    "while do block": {
        "prefix": "while",
        "body": [
            "while ${1:_condition_} do",
            "\t${2:_body_}",
            "end"
        ],
        "description": "Run do-block while the condition is true",
        "scope": "source.porth"
    },
    "do": {
        "prefix": "do",
        "body": "do",
        "description": "Instrinsic: do",
        "scope": "source.porth"
    },
    "end": {
        "prefix": "end",
        "body": "end",
        "description": "Marks the end of a block",
        "scope": "source.porth"
    },
    "assert": {
        "prefix": "assert",
        "body": "assert",
        "description": "Static assert",
        "scope": "source.porth"
    },
    "offset": {
        "prefix": "offset",
        "body": "offset",
        "description": "Increase the memory counter by n bytes",
        "scope": "source.porth"
    },
    "reset": {
        "prefix": "reset",
        "body": "reset",
        "description": "Reset the memory counter and assign the value",
        "scope": "source.porth"
    },
    "const": {
        "prefix": "const",
        "body": "const ${1:_name_} ${2:_bytes_} end",
        "description": "Constant definition: Value gets expanded at compile time",
        "scope": "source.porth"
    },


    
    "+ (add)": {
        "prefix": "+",
        "body": "+",
        "description": [
            "Intrinsic: Adds the stack's two topmost values:",
            "\tðŸ‘‰ (stack[0] + stack[1])"
        ],
        "scope": "source.porth"
    },
    "- (substract)": {
        "prefix": "-",
        "body": "-",
        "description": [
            "Intrinsic: Subtracts the stack's topmost two values",
            "\tðŸ‘‰ (stack[1] - stack[0])"
        ],
        "scope": "source.porth"
    },
    "* (multiply)": {
        "prefix": "*",
        "body": "*",
        "description": [
            "Intrinsic: Multiplies the stack's topmost two values",
            "\tðŸ‘‰ (stack[1] * stack[0])"
        ],
        "scope": "source.porth"
    },
    "divmod (divide with remainder)": {
        "prefix": "divmod",
        "body": "divmod",
        "description": [
            "Intrinsic: Divides the stack's topmost two values with remainder",
            "\tðŸ‘‰ (stack[1] / stack[0]) (stack[1] % stack[0])"
        ],
        "scope": "source.porth"
    },
    "print": {
        "prefix": "print",
        "body": "print",
        "description": [
            "Intrinsic: Prints the stack's topmost value",
            "\tðŸ‘‰ print(stack[0])"
        ],
        "scope": "source.porth"
    },
    "= (compare equal)": {
        "prefix": "=",
        "body": "=",
        "description": [
            "Intrinsic: Compares the stack's topmost two values [equal]",
            "\tðŸ‘‰ (stack[1] == stack[0])"
        ],
        "scope": "source.porth"
    },
    "> (greater than)": {
        "prefix": ">",
        "body": ">",
        "description": [
            "Intrinsic: Compares the stack's topmost two values [greater than]",
            "\tðŸ‘‰ (stack[1] > stack[0])"
        ],
        "scope": "source.porth"
    },
    "< (less than)": {
        "prefix": "<",
        "body": "<",
        "description": [
            "Intrinsic: Compares the stack's topmost two values [less than]",
            "\tðŸ‘‰ (stack[1] < stack[0])"
        ],
        "scope": "source.porth"
    },
    ">= (greater than or equal)": {
        "prefix": ">=",
        "body": ">=",
        "description": [
            "Intrinsic: Compares the stack's topmost two values [greater than or equal]",
            "\tðŸ‘‰ (stack[1] >= stack[0])"
        ],
        "scope": "source.porth"
    },
    "<= (less than or equal)": {
        "prefix": "<=",
        "body": "<=",
        "description": [
            "Intrinsic: Compares the stack's topmost two values [less than or equal]",
            "\tðŸ‘‰ (stack[1] <= stack[0])"
        ],
        "scope": "source.porth"
    },
    "!= (not equal)": {
        "prefix": "!=",
        "body": "!=",
        "description": [
            "Intrinsic: Compares the stack's topmost two values [not equal]",
            "\tðŸ‘‰ (stack[1] != stack[0])"
        ],
        "scope": "source.porth"
    },
    "shr (bitshift right)": {
        "prefix": "shr",
        "body": "shr",
        "description": [
            "Intrinsic: Bitshifts the stack's topmost two values right",
            "\tðŸ‘‰ (stack[1] >> stack[0])"
        ],
        "scope": "source.porth"
    },
    "shl (bitshift left)": {
        "prefix": "shl",
        "body": "shl",
        "description": [
            "Intrinsic: Bitshifts the stack's topmost two values left",
            "\tðŸ‘‰ (stack[1] << stack[0])"
        ],
        "scope": "source.porth"
    },
    "or (bitwise or)": {
        "prefix": "or",
        "body": "or",
        "description": [
            "Intrinsic: Bitwise ors the stack's topmost two values",
            "\tðŸ‘‰ (stack[1] | stack[0])"
        ],
        "scope": "source.porth"
    },
    "and (bitwise and)": {
        "prefix": "and",
        "body": "and",
        "description": [
            "Intrinsic: Bitwise ands the stack's topmost two values",
            "\tðŸ‘‰ (stack[1] & stack[0])"
        ],
        "scope": "source.porth"
    },
    "not (bitwise not)": {
        "prefix": "not",
        "body": "not",
        "description": [
            "Intrinsic: Bitwise inverts the stack's topmost value",
            "\tðŸ‘‰ (~stack[0])"
        ],
        "scope": "source.porth"
    },
    "dup (duplicate)": {
        "prefix": "dup",
        "body": "dup",
        "description": [
            "Intrinsic: Duplicates the stack's two topmost values:",
            "\tðŸ‘‰ (stack[0])"
        ],
        "scope": "source.porth"
    },
    "swap": {
        "prefix": "swap",
        "body": "swap",
        "description": [
            "Intrinsic: Swaps the stack's two topmost values:",
            "\tðŸ‘‰ swap(stack[1], stack[0])"
        ],
        "scope": "source.porth"
    },
    "drop": {
        "prefix": "drop",
        "body": "drop",
        "description": [
            "Intrinsic: Pops the stack's topmost value:",
            "\tðŸ‘‰ pop(stack[0])"
        ],
        "scope": "source.porth"
    },
    "over": {
        "prefix": "over",
        "body": "over",
        "description": [
            "Intrinsic: Appends the stack's second to topmost value:",
            "\tðŸ‘‰ (stack[1])"
        ],
        "scope": "source.porth"
    },
    "rot (rotate)": {
        "prefix": "rot",
        "body": "rot",
        "description": [
            "Intrinsic: Rotates the stack's three topmost values backwards:"
        ],
        "scope": "source.porth"
    },
    "!8 (store 8-bit value)": {
        "prefix": "!8",
        "body": "!8",
        "description": [
            "Intrinsic: Stores an 8-bit value in memory:",
            "\tðŸ‘‰ mem[*stack[0]] = stack[1]"
        ],
        "scope": "source.porth"
    },
    "@8 (load 8-bit value)": {
        "prefix": "@8",
        "body": "@8",
        "description": [
            "Intrinsic: Loads an 8-bit value from memory:",
            "\tðŸ‘‰ (mem[*stack[0]])"
        ],
        "scope": "source.porth"
    },
    "!16 (store 16-bit value)": {
        "prefix": "!16",
        "body": "!16",
        "description": [
            "Intrinsic: Stores a 16-bit value in memory:",
            "\tðŸ‘‰ memcpy(&mem[stack[0]], stack[1], 1)"
        ],
        "scope": "source.porth"
    },
    "@16 (load 16-bit value)": {
        "prefix": "@16",
        "body": "@16",
        "description": [
            "Intrinsic: Loads a value from memory:",
            "\tðŸ‘‰ memcpy(&stack, mem[*stack[0]], 1)"
        ],
        "scope": "source.porth"
    },
    "!32 (store 32-bit value)": {
        "prefix": "!32",
        "body": "!32",
        "description": [
            "Intrinsic: Stores a 32-bit value in memory:",
            "\tðŸ‘‰ memcpy(&mem[stack[0]], stack[1], 2)"
        ],
        "scope": "source.porth"
    },
    "@32 (load 32-bit value)": {
        "prefix": "@32",
        "body": "@32",
        "description": [
            "Intrinsic: Loads a value from memory:",
            "\tðŸ‘‰ memcpy(&stack, mem[*stack[0]], 2)"
        ],
        "scope": "source.porth"
    },
    "!64 (store 64-bit value)": {
        "prefix": "!64",
        "body": "!64",
        "description": [
            "Intrinsic: Stores a 64-bit value in memory:",
            "\tðŸ‘‰ memcpy(&mem[stack[0]], stack[1], 4)"
        ],
        "scope": "source.porth"
    },
    "@64 (load 64-bit value)": {
        "prefix": "@64",
        "body": "@64",
        "description": [
            "Intrinsic: Loads a 64-bit value from memory:",
            "\tðŸ‘‰ memcpy(&stack, mem[*stack[0]], 4)"
        ],
        "scope": "source.porth"
    },
    "syscall0": {
        "prefix": "syscall0",
        "body": "syscall0",
        "description": [
            "Intrinsic: Linux kernel system call with 0 arguments"
        ],
        "scope": "source.porth"
    },
    "syscall1": {
        "prefix": "syscall1",
        "body": "syscall1",
        "description": [
            "Intrinsic: Linux kernel system call with 1 arguments"
        ],
        "scope": "source.porth"
    },
    "syscall2": {
        "prefix": "syscall2",
        "body": "syscall2",
        "description": [
            "Intrinsic: Linux kernel system call with 2 arguments"
        ],
        "scope": "source.porth"
    },
    "syscall3": {
        "prefix": "syscall3",
        "body": "syscall3",
        "description": [
            "Intrinsic: Linux kernel system call with 3 arguments"
        ],
        "scope": "source.porth"
    },
    "syscall4": {
        "prefix": "syscall4",
        "body": "syscall4",
        "description": [
            "Intrinsic: Linux kernel system call with 4 arguments"
        ],
        "scope": "source.porth"
    },
    "syscall5": {
        "prefix": "syscall5",
        "body": "syscall5",
        "description": [
            "Intrinsic: Linux kernel system call with 5 arguments"
        ],
        "scope": "source.porth"
    },
    "syscall6": {
        "prefix": "syscall6",
        "body": "syscall6",
        "description": [
            "Intrinsic: Linux kernel system call with 6 arguments"
        ],
        "scope": "source.porth"
    },
    "argc": {
        "prefix": "argc",
        "body": "argc",
        "description": [
            "Intrinsic: Appends the number of arguments:",
            "\tðŸ‘‰ (argc)"
        ],
        "scope": "source.porth"
    },
    "argv": {
        "prefix": "argv",
        "body": "argv",
        "description": [
            "Intrinsic: Appends the pointer to the string array of arguments:",
            "\tðŸ‘‰ (argv)"
        ],
        "scope": "source.porth"
    },
    "cast(ptr)": {
        "prefix": "cast(ptr)",
        "body": "cast(ptr)",
        "description": [
            "Intrinsic: Casts the stack's topmost value to a pointer:",
            "\tðŸ‘‰ (void *) stack[0]"
        ],
        "scope": "source.porth"
    },
    "cast(int)": {
        "prefix": "cast(int)",
        "body": "cast(int)",
        "description": [
            "Intrinsic: Casts the stack's topmost value to an integer:",
            "\tðŸ‘‰ (int) stack[0]"
        ],
        "scope": "source.porth"
    },
    "cast(bool)": {
        "prefix": "cast(bool)",
        "body": "cast(bool)",
        "description": [
            "Intrinsic: Casts the stack's topmost value to a boolean:",
            "\tðŸ‘‰ (stack[0] == 0)"
        ],
        "scope": "source.porth"
    },
    "here": {
        "prefix": "here",
        "body": "here",
        "description": [
            "Intrinsic: Appends a string of this word's location in the file:"
        ],
        "scope": "source.porth"
    },
    "max": {
        "prefix": "max",
        "body": "max",
        "description": [
            "Intrinsic: Appends the maximum of the stack's two topmost values:",
            "\tðŸ‘‰ max(stack[0], stack[1])"
        ],
        "scope": "source.porth"
    },
    "int": {
        "prefix": "int",
        "body": "int",
        "description": "Datatype: Integer",
        "scope": "source.porth"
    },
    "ptr": {
        "prefix": "ptr",
        "body": "ptr",
        "description": "Datatype: Pointer",
        "scope": "source.porth"
    },
    "bool": {
        "prefix": "bool",
        "body": "bool",
        "description": "Datatype: Boolean",
        "scope": "source.porth"
    },
    "in": {
        "prefix": "in",
        "body": "in",
        "description": "End of procedure signature",
        "scope": "source.porth"
    },
    "--": {
        "prefix": "--",
        "body": "--",
        "description": "Procedure signature [argument types] -- [return types] seperator",
        "scope": "source.porth"
    },
    "addr": {
        "prefix": "addr",
        "body": "addr",
        "description": "Datatype: Procedure address",
        "scope": "source.porth"
    },
    "addr-of": {
        "prefix": "addr-of",
        "body": "addr-of",
        "description": "Returns the address of a procedure: addr [proc]",
        "scope": "source.porth"
    },
    "call-like": {
        "prefix": "call-like",
        "body": "call-like",
        "description": "Calls procedure at address with signature: [addr] call-like [proc-sig]",
        "scope": "source.porth"
    },
    "let": {
        "prefix": "let",
        "body": "let",
        "description": "Bind names to values on the stack and drop them: let [name1] [name2] ... [nameN] in [body] end",
        "scope": "source.porth"
    },
    "peek": {
        "prefix": "peek",
        "body": "peek",
        "description": "Bind names to values on the stack but not drop them: peek [name1] [name2] ... [nameN] in [body] end",
        "scope": "source.porth"
    }
}