{
	"include": {
		"prefix": "include",
		"body": "include \"${1:}.porth\"",
		"description": "Include porth files",
		"scope": "source.porth"
	},
    "include std": {
        "prefix": "include",
        "body": "include \"std.porth\"",
        "description": "Include the porth standard library",
        "scope": "source.porth"
    },
    "macro": {
        "prefix": "macro",
        "body": "macro ${1:_name_} ${2:_body_} end",
        "description": "Macro definition",
        "scope": "source.porth"
    },
    "if": {
        "prefix": "if",
        "body": [
            "if",
            "\t${1:_body_}",
            "end"
        ],
        "description": "Branch if-block if (stack[0] == 0)",
        "scope": "source.porth"
    },
    "else": {
        "prefix": "else",
        "body": "else",
        "description": "Else block after if block",
        "scope": "source.porth"
    },
    "if else": {
        "prefix": ["if", "if else"],
        "body": [
            "if",
            "\t${1:_body_}",
            "else",
            "\t${2:_body_}",
            "end"
        ],
        "description": "Branch if-else-block if (stack[0] == 0)",
        "scope": "source.porth"
    },
    "while do": {
        "prefix": ["while", "while do"],
        "body": [
            "while ${1:_condition_} do",
            "\t${2:_body_}",
            "end"
        ],
        "description": "Run do-block while the condition is true",
        "scope": "source.porth"
    },
    "end": {
        "prefix": "end",
        "body": "end",
        "description": "Marks the end of a block",
        "scope": "source.porth"
    },
    "+ (add)": {
        "prefix": "+",
        "body": "+",
        "description": [
            "Adds the stack's two topmost values:",
            "\tðŸ‘‰ (stack[0] + stack[1])"
        ],
        "scope": "source.porth"
    },
    "- (substract)": {
        "prefix": "-",
        "body": "-",
        "description": [
            "Subtracts the stack's topmost two values",
            "\tðŸ‘‰ (stack[1] - stack[0])"
        ],
        "scope": "source.porth"
    },
    "* (multiply)": {
        "prefix": "*",
        "body": "*",
        "description": [
            "Multiplies the stack's topmost two values",
            "\tðŸ‘‰ (stack[1] * stack[0])"
        ],
        "scope": "source.porth"
    },
    "divmod (divide with remainder)": {
        "prefix": "divmod",
        "body": "divmod",
        "description": [
            "Divides the stack's topmost two values",
            "\tðŸ‘‰ (stack[1] / stack[0]) (stack[1] % stack[0])"
        ],
        "scope": "source.porth"
    },
    "print": {
        "prefix": "print",
        "body": "print",
        "description": [
            "Divides the stack's topmost two values",
            "\tðŸ‘‰ print(stack[0])"
        ],
        "scope": "source.porth"
    },
    "= (compare equal)": {
        "prefix": "=",
        "body": "=",
        "description": [
            "Compares the stack's topmost two values [equal]",
            "\tðŸ‘‰ (stack[1] == stack[0])"
        ],
        "scope": "source.porth"
    },
    "> (greater than)": {
        "prefix": ">",
        "body": ">",
        "description": [
            "Compares the stack's topmost two values [greater than]",
            "\tðŸ‘‰ (stack[1] > stack[0])"
        ],
        "scope": "source.porth"
    },
    "< (less than)": {
        "prefix": "<",
        "body": "<",
        "description": [
            "Compares the stack's topmost two values [less than]",
            "\tðŸ‘‰ (stack[1] < stack[0])"
        ],
        "scope": "source.porth"
    },
    ">= (greater than or equal)": {
        "prefix": ">=",
        "body": ">=",
        "description": [
            "Compares the stack's topmost two values [greater than or equal]",
            "\tðŸ‘‰ (stack[1] >= stack[0])"
        ],
        "scope": "source.porth"
    },
    "<= (less than or equal)": {
        "prefix": "<=",
        "body": "<=",
        "description": [
            "Compares the stack's topmost two values [less than or equal]",
            "\tðŸ‘‰ (stack[1] <= stack[0])"
        ],
        "scope": "source.porth"
    },
    "!= (not equal)": {
        "prefix": "!=",
        "body": "!=",
        "description": [
            "Compares the stack's topmost two values [not equal]",
            "\tðŸ‘‰ (stack[1] != stack[0])"
        ],
        "scope": "source.porth"
    },
    "shr (bitshift right)": {
        "prefix": "shr",
        "body": "shr",
        "description": [
            "Bitshifts the stack's topmost two values right",
            "\tðŸ‘‰ (stack[1] >> stack[0])"
        ],
        "scope": "source.porth"
    },
    "shl (bitshift left)": {
        "prefix": "shl",
        "body": "shl",
        "description": [
            "Bitshifts the stack's topmost two values left",
            "\tðŸ‘‰ (stack[1] << stack[0])"
        ],
        "scope": "source.porth"
    },
    "bor (bitwise or)": {
        "prefix": "bor",
        "body": "bor",
        "description": [
            "Bitwise ors the stack's topmost two values",
            "\tðŸ‘‰ (stack[1] | stack[0])"
        ],
        "scope": "source.porth"
    },
    "band (bitwise and)": {
        "prefix": "band",
        "body": "band",
        "description": [
            "Bitwise ands the stack's topmost two values",
            "\tðŸ‘‰ (stack[1] & stack[0])"
        ],
        "scope": "source.porth"
    },
    "dup": {
        "prefix": "dup",
        "body": "dup",
        "description": [
            "Duplicates the stack's two topmost values:",
            "\tðŸ‘‰ (stack[0])"
        ],
        "scope": "source.porth"
    },
    "swap": {
        "prefix": "swap",
        "body": "swap",
        "description": [
            "Swaps the stack's two topmost values:",
            "\tðŸ‘‰ swap(stack[1], stack[0])"
        ],
        "scope": "source.porth"
    },
    "drop": {
        "prefix": "drop",
        "body": "drop",
        "description": [
            "Pops the stack's topmost value:",
            "\tðŸ‘‰ pop(stack[0])"
        ],
        "scope": "source.porth"
    },
    "over": {
        "prefix": "over",
        "body": "over",
        "description": [
            "Appends the stack's second to topmost value:",
            "\tðŸ‘‰ (stack[1])"
        ],
        "scope": "source.porth"
    },
    "mem": {
        "prefix": "mem",
        "body": "mem",
        "description": [
            "Appends the memory size:",
            "\tðŸ‘‰ (sizeof(memory))"
        ],
        "scope": "source.porth"
    },
    ". (store in memory)": {
        "prefix": ".",
        "body": ".",
        "description": [
            "Stores a value in memory:",
            "\tðŸ‘‰ *stack[1] = stack[0]"
        ],
        "scope": "source.porth"
    },
    ", (load from memory)": {
        "prefix": ",",
        "body": ",",
        "description": [
            "Loads a value from memory:",
            "\tðŸ‘‰ (*stack[0])"
        ],
        "scope": "source.porth"
    },
    ".64 (store u64 in memory)": {
        "prefix": ".64",
        "body": ".64",
        "description": [
            "Stores a 64-bit value in memory:",
            "\tðŸ‘‰ memcpy(stack[1], &stack[0], 2)"
        ],
        "scope": "source.porth"
    },
    ",64 (load u64 from memory)": {
        "prefix": ",64",
        "body": ",64",
        "description": [
            "Load a 64-bit value from memory:",
            "\tðŸ‘‰ memcpy(stack, &stack[0], 2)"
        ],
        "scope": "source.porth"
    },
    "syscall0 (get PID)": {
        "prefix": ["syscall0", "getPID", "pid", "PID"],
        "body": "syscall0",
        "description": [
            "Performs the system call: get PID",
            "\tðŸ‘‰ syscall stack[0](scnum)"
        ],
        "scope": "source.porth"
    },
    "syscall1 (exit with code)": {
        "prefix": ["syscall1", "exit", "quit"],
        "body": "syscall1",
        "description": [
            "Performs the system call: exit",
            "\tðŸ‘‰ syscall stack[0](scnum) stack[1](arg1)"
        ],
        "scope": "source.porth"
    },
    "syscall2 ()": {
        "prefix": ["syscall2"],
        "body": "syscall2",
        "description": [
            "Performs the system call: /",
            "\tðŸ‘‰ syscall stack[0](scnum)"
        ],
        "scope": "source.porth"
    },
    "syscall3 (read/write file)": {
        "prefix": ["syscall3"],
        "body": "syscall3",
        "description": [
            "Performs the system call: read/write file",
            "\tðŸ‘‰ syscall stack[0](scnum) stack[1](stream) stack[2](buf) stack[3](size)"
        ],
        "scope": "source.porth"
    },
    "syscall4 ()": {
        "prefix": ["syscall4"],
        "body": "syscall4",
        "description": [
            "Performs the system call: /",
            "\tðŸ‘‰ syscall stack[0](scnum)"
        ],
        "scope": "source.porth"
    },
    "syscall5 ()": {
        "prefix": ["syscall5"],
        "body": "syscall5",
        "description": [
            "Performs the system call: /",
            "\tðŸ‘‰ syscall stack[0](scnum)"
        ],
        "scope": "source.porth"
    },
    "syscall6 ()": {
        "prefix": ["syscall6"],
        "body": "syscall6",
        "description": [
            "Performs the system call: /",
            "\tðŸ‘‰ syscall stack[0](scnum)"
        ],
        "scope": "source.porth"
    },
    "if divisible": {
        "prefix": ["ifdiv", "ifmod"],
        "body": [
            "dup ${1:_divisor_} % 0 = if",
            "\t${2:_body_}",
            "end"
        ],
        "description": "Branch if value is divisible by a number",
        "scope": "source.porth"
    },
    "argc": {
        "prefix": "argc",
        "body": "argc",
        "description": "Appends the number of arguments",
        "scope": "source.porth"
    },
    "argv": {
        "prefix": "argv",
        "body": "argv",
        "description": "Appends the pointer to the array of arguments",
        "scope": "source.porth"
    },
    "cast(ptr)": {
        "prefix": "cast(ptr)",
        "body": "cast(ptr)",
        "description": "Casts value to a pointer",
        "scope": "source.porth"
    }
}